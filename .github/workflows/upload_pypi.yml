name: Build n publish to PYPI

on:
  workflow_dispatch:
    inputs:
      version:
        description: Double check and make sure it's correct.
        required: true

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: echo "pyver $(python --version)"
        
      ## <prebuild>
      - run: find . -mindepth 1 -maxdepth 1 ! -name 'mykit' -exec rm -r {} +  # cleanup: just keep the main folder (mykit/)
      - run: |
          import os  # Write pyproject.toml
          texts = (
            "[project]\n"
            "name = 'mykit'\n"
            "version = '${{ inputs.version }}'\n"
            "[project.scripts]\n"
            "mykit = 'mykit.__main__:main'"
          )
          print(texts)
          with open(os.path.join(os.getcwd(), 'pyproject.toml'), 'w') as f: f.write(texts)
        shell: python
      - run: |
          import os  # delete all "test.py" files
          def run(dir_pth):
            for i in sorted(os.listdir(dir_pth)):
              ipth = os.path.join(dir_pth, i)
              if os.path.isfile(ipth):
                if i == 'test.py': os.remove(ipth); print(f"Deleted: {repr(ipth)}")
              else: run(ipth)
          run(os.path.join(os.getcwd(), 'mykit'))
        shell: python
      - run: |
          import os, re  # remove comments and empty lines. TODO: this will break docstrings (making them unreadable), but it's okay.
          def run(dir_pth):
            for i in sorted(os.listdir(dir_pth)):
              ipth = os.path.join(dir_pth, i)
              if os.path.isfile(ipth):
                print(f"Now: {repr(ipth)}")
                size0 = os.path.getsize(ipth)
                if size0 == 0: print("Empty file..."); continue
                with open(ipth, 'r') as f: txt = f.read().split('\n')
                
                for idx, line in enumerate(txt):
                  res = re.match(r'^[ ]*$', line)  # blank line
                  if res is not None: txt[idx] = None; print(f"@{idx+1}: {repr(txt[idx])}")
                  else:
                    res = re.match(r'^[ ]*#.*$', line)  # commented line
                    if res is not None: print(f"@{idx+1}: {repr(txt[idx])}"); txt[idx] = None
                    else:
                      res = re.match(r'(?P<keep>.*?)(?P<rm>#.*)', line)  # inline comments
                      if res is not None: txt[idx] = res.group('keep'); print(f"@{idx+1}: {repr(res.group('rm'))}")
                      else:
                        res = re.match(r'(?P<keep>.*?)(?P<rm>[ ]+)$', line)  # inline unused spaces
                        if res is not None: txt[idx] = res.group('keep'); print(f"@{idx+1}: {repr(res.group('rm'))}")
                txt = [i for i in txt if (i is not None)]  # remove the `None`s

                if len(txt) == 0:  # handle the case where it's an empty file with some blank lines
                  print("Endup being empty...")
                  txt = ['']
                
                with open(ipth, 'w') as f: f.write('\n'.join(txt))
                print(f"Compression: {round( 100*(size0-os.path.getsize(ipth))/size0 )}%")
              else: run(ipth)
          run(os.path.join(os.getcwd(), 'mykit'))
        shell: python
      ## </prebuild>


      ## Build and publish

      - uses: nvfp/ghact-dirtree@main
        with:
          dir: .

      - run: pip install build==1.0.3 twine==4.0.2
      - run: python -m build

      - uses: nvfp/ghact-dirtree@main
        with:
          dir: .

      - run: twine upload dist/*
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
