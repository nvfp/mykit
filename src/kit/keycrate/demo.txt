


#-- === EXAMPLE 1: NORMAL SYNTAX ===
#-----------------------------------


key1   : 1
key2   : (1, 2)  #-- with comment-line
key3000: [1, 2]
file_path: r'C:\foo\bar'
file_path2: r'/foo/bar'

#-- this is comment-header
  key4  : {1: {1, 2}}  #-- this key has formatting-spaces (2 spaces leading and trailing the key)




#-- === EXAMPLE 2: USING `key_is_var=True` ===
#---------------------------------------------

#-- The motivation behind `key_is_var` is the ease of accessing the value.
#-- Instead of `x = kc['key']`, would be easier via `x = kc.key`.


#-- Quality
out_file_name: 'proto'
frame_rate   : 24
render_width : 1280
render_height: 720

#-- Supported extensions
img_file_ext : ['.png', '.jpg']
vid_file_ext : ['.mp4', '.mov']

#-- Misc
antialiasing_is_on: False




#-- === EXAMPLE 3: USING `eval_value=True` ===
#---------------------------------------------

key1: [1, 2, 3, 4, 5]
key2: 'foo\nbar\nbaz'
key3: {'x': 1, 'y': 2}




#-- === EXAMPLE 4: USING `key_is_var=False` ===
#----------------------------------------------

#-- these keys can't be used as variable name, sometimes this style is preferred.


Full name     : Foo Bar
Group area    : Core Engine II
Title/position: Manager
Sign-up date  : May 17 2023




#-- === EXAMPLE 5: USING `eval_value=False` ===
#----------------------------------------------

#-- all values are literal string that doesn't need to be evaluated by `eval()`.


key1: she likes chickens
key2: she has 3 chickens




#-- === EXAMPLE 6: EXTREME SYNTAX ===
#------------------------------------


#-- extreme cases (but it still works)
#----------------


:a::b:  #-- key is :a, value is :b:

#-- below are space-key and space-value (both are single space ' ')
 :   

    abc         :  xyz
abc2            :    pqr!  #-- some comment  #-- double comment
abc3-4-         : - 1 3 4 #--#--  #-- triple comment
abc4-[1, 2, 3]  : [1, 2, 3]
abc5 with spaces:     -aaa bbb ccc ddd-
  #-- key       :  this is a comment-header that looks like key-value pair

  #-- this comment-header preceded by spaces
-abcd+ : #-- this is value, not a comment  #-- and this is the comment




#-- === EXAMPLE 7: INVALID SYNTAX 1 (`k v` KEY HAS NO VALUE) ===
#---------------------------------------------------------------

key: val
k:v

k v


k-v: v-k




#-- === EXAMPLE 8: INVALID SYNTAX 2 (NO KEY) ===
#-----------------------------------------------


: 




#-- === EXAMPLE 9: INVALID SYNTAX 3 (NO VALUE) ===
#-------------------------------------------------


 :




#-- === EXAMPLE 10: INVALID SYNTAX 4 (DUPLICATED KEYS) ===
#---------------------------------------------------------

k1: v1
k1:v2




#-- === EXAMPLE 11: INVALID SYNTAX 5 (DUPLICATED KEYS, ONLY ONE SPACE-KEY IS ALLOWED) ===
#----------------------------------------------------------------------------------------

 : #-- pass
  : #-- fail




#-- === EXAMPLE 12: INVALID WHEN `key_is_var=True` ===
#-----------------------------------------------------

k-: v
-k: v




#-- === EXAMPLE 13: INVALID WHEN `eval_value=True` ===
#-----------------------------------------------------

a: 'a'  #-- pass
b: b  #-- fail
c: a b c  #-- fail
d: func(0)  #-- fail




#-- === EXAMPLE 14: PASS WHEN `eval_value=True` ===
#--------------------------------------------------

a: 'a'
b: 'a\nb\nc'
c: 1
d: 1.0
e: [1, 2]
f: (1, 2)
g: {1: 1}
h: {1, 2}
i: tuple([1, 2])
j: list((1, 2))
k: 3**2
l: pow(3, 2)